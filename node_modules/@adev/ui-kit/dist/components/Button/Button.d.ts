import React from "react";
import { defaultProps } from "../../utils/defaultProps";
export type ButtonPropsType = defaultProps & {
    /**
     * Дочерние элементы кнопки
     */
    children?: React.ReactNode;
    /**
     * Внеший вид кнопки
     */
    view?: "default" | "action" | "link" | "pseudo" | "clear" | "accent" | "contrast";
    /**
     * Размер кнопки
     */
    size?: "xs" | "sm" | "md" | "lg" | "xl";
    /**
     * обработчик клика по кнопке
     */
    onClick?: (event?: React.PointerEvent<HTMLButtonElement>) => void;
    /**
     * Обработчик события нажатия кнопки мыши на компоненте
     */
    onPointerDown?: (event?: React.PointerEvent<HTMLButtonElement>) => void;
    /**
     * Обработчик события отпускания кнопки мыши на компоненте
     */
    onPointerUp?: (event?: React.PointerEvent<HTMLButtonElement>) => void;
    /**
     * Обработчик события ухода курсора с компонента
     */
    onPointerLeave?: (event?: React.PointerEvent<HTMLButtonElement>) => void;
    /**
     * Обработчик события ухода фокуса с компонента
     */
    onBlur?: (event?: React.FocusEvent<HTMLButtonElement>) => void;
    /**
     * Название кнопки в DOM дереве
     */
    name?: string;
    /**
     * Контролирует ширину кнопки. Когда 'available' растягивает кнопку на ширину родителя
     */
    width?: "auto" | "available";
    /**
     * Дочерние элементы кнопки слева
     */
    contentLeft?: React.ReactNode;
    /**
     * Дочерние элементы кнопки справа
     */
    contentRight?: React.ReactNode;
    /**
     * Тип кнопки
     */
    type?: "button" | "reset" | "submit";
    /**
     * Неактивное состояние кнопки: состояние, когда кнопка отображается, но не доступна для действий пользователя
     */
    disabled?: boolean;
    /**
     * Закруглена ли кнопка
     */
    rounded?: boolean;
    /**
     * Показывать ли индикатор загрузки на кнопке
     */
    progress?: boolean;
    /**
     * Дополнительные стили для лейбла кнопки
     */
    labelStyles?: React.CSSProperties;
    /**
     * Дополнительный класс для лейбла кнопки
     */
    labelClassName?: string;
    /**
     * Управление табом
     */
    tabIndex?: number;
};
/**
 * Компонент кнопки. Он нажимается :D
 */
declare const Button: React.ForwardRefExoticComponent<defaultProps & {
    /**
     * Дочерние элементы кнопки
     */
    children?: React.ReactNode;
    /**
     * Внеший вид кнопки
     */
    view?: "default" | "action" | "link" | "pseudo" | "clear" | "accent" | "contrast" | undefined;
    /**
     * Размер кнопки
     */
    size?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
    /**
     * обработчик клика по кнопке
     */
    onClick?: ((event?: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
    /**
     * Обработчик события нажатия кнопки мыши на компоненте
     */
    onPointerDown?: ((event?: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
    /**
     * Обработчик события отпускания кнопки мыши на компоненте
     */
    onPointerUp?: ((event?: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
    /**
     * Обработчик события ухода курсора с компонента
     */
    onPointerLeave?: ((event?: React.PointerEvent<HTMLButtonElement>) => void) | undefined;
    /**
     * Обработчик события ухода фокуса с компонента
     */
    onBlur?: ((event?: React.FocusEvent<HTMLButtonElement>) => void) | undefined;
    /**
     * Название кнопки в DOM дереве
     */
    name?: string | undefined;
    /**
     * Контролирует ширину кнопки. Когда 'available' растягивает кнопку на ширину родителя
     */
    width?: "auto" | "available" | undefined;
    /**
     * Дочерние элементы кнопки слева
     */
    contentLeft?: React.ReactNode;
    /**
     * Дочерние элементы кнопки справа
     */
    contentRight?: React.ReactNode;
    /**
     * Тип кнопки
     */
    type?: "button" | "reset" | "submit" | undefined;
    /**
     * Неактивное состояние кнопки: состояние, когда кнопка отображается, но не доступна для действий пользователя
     */
    disabled?: boolean | undefined;
    /**
     * Закруглена ли кнопка
     */
    rounded?: boolean | undefined;
    /**
     * Показывать ли индикатор загрузки на кнопке
     */
    progress?: boolean | undefined;
    /**
     * Дополнительные стили для лейбла кнопки
     */
    labelStyles?: React.CSSProperties | undefined;
    /**
     * Дополнительный класс для лейбла кнопки
     */
    labelClassName?: string | undefined;
    /**
     * Управление табом
     */
    tabIndex?: number | undefined;
} & React.RefAttributes<HTMLButtonElement>>;
export default Button;
