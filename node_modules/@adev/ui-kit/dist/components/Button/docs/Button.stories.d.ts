import React from "react";
import { StoryObj } from "@storybook/react";
import Button from "../Button";
declare const _default: import("@storybook/types").ComponentAnnotations<import("@storybook/react/dist/types-0a347bb9").R, import("../../../utils/defaultProps").defaultProps & {
    children?: React.ReactNode;
    view?: "default" | "action" | "link" | "pseudo" | "clear" | "accent" | "contrast" | undefined;
    size?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
    onClick?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onPointerDown?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onPointerUp?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onPointerLeave?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onBlur?: ((event?: React.FocusEvent<HTMLButtonElement, Element> | undefined) => void) | undefined;
    name?: string | undefined;
    width?: "auto" | "available" | undefined;
    contentLeft?: React.ReactNode;
    contentRight?: React.ReactNode;
    type?: "button" | "reset" | "submit" | undefined;
    disabled?: boolean | undefined;
    rounded?: boolean | undefined;
    progress?: boolean | undefined;
    labelStyles?: React.CSSProperties | undefined;
    labelClassName?: string | undefined;
    tabIndex?: number | undefined;
} & React.RefAttributes<HTMLButtonElement>>;
export default _default;
export declare const Playground: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0a347bb9").R, import("../../../utils/defaultProps").defaultProps & {
    children?: React.ReactNode;
    view?: "default" | "action" | "link" | "pseudo" | "clear" | "accent" | "contrast" | undefined;
    size?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
    onClick?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onPointerDown?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onPointerUp?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onPointerLeave?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onBlur?: ((event?: React.FocusEvent<HTMLButtonElement, Element> | undefined) => void) | undefined;
    name?: string | undefined;
    width?: "auto" | "available" | undefined;
    contentLeft?: React.ReactNode;
    contentRight?: React.ReactNode;
    type?: "button" | "reset" | "submit" | undefined;
    disabled?: boolean | undefined;
    rounded?: boolean | undefined;
    progress?: boolean | undefined;
    labelStyles?: React.CSSProperties | undefined;
    labelClassName?: string | undefined;
    tabIndex?: number | undefined;
} & React.RefAttributes<HTMLButtonElement>>;
/**
 * Чтобы изменить внешний вид кнопки, установите для параметра `view` одно из следующих значений: `default`, `contrast`, `action`, `link`, `pseudo`, `clear`, `raised`.
 */
export declare const ViewTemplate: StoryObj<typeof Button>;
/**
 * Чтобы изменить размер кнопки, установите свойству `size` одно из следующих значений: `xl`, `lg`, `md`, `sm`, `xs`.
 */
export declare const SizeTemplate: StoryObj<typeof Button>;
/**
 * С помощью `contentLeft` и `contentRight` можно кастомизировать кнопку. Например, добавить иконку. Переданный контент будет отрисован слева или справа от текста кнопки. Если текста нет — будет отрисована квадратная кнопка.
 */
export declare const AddonTemplate: StoryObj<typeof Button>;
/**
 * Чтобы изменить ширину кнопки, установите свойству `width` одно из следующих значений:
  - `auto` — ширина определяется шириной текста. Ширина кнопки не может быть больше ширины контейнера. Если ширина текста больше ширины контейнера, текст обрезается многоточием.
  - `available` — ширина определяется шириной контейнера. Если ширина текста больше ширины контейнера, текст обрезается многоточием.
 */
export declare const WidthTemplate: StoryObj<typeof Button>;
export declare const CarouselButtons: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0a347bb9").R, import("../../Carousel/CarouselButton/CarouselButton").ICarouselButtonProps>;
