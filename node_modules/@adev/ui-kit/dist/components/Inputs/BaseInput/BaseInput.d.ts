import React from "react";
import { defaultProps } from "../../../utils/defaultProps";
export interface ITextInputValidator {
    /**
     * Инпут должен быть заполнен
     */
    notEmpty?: boolean;
    /**
     * Регулярное выражение, которому должно соответствовать значение
     */
    pattern?: RegExp;
    /**
     * Сообщение, которое будет отображено, если значение не соответствует регулярному выражению
     */
    message?: string;
}
export type TextInputProps = defaultProps & {
    /**
     * Лейбл для текстового поля
     */
    label: string;
    /**
     * Максимальная длина вводимого значения
     */
    maxLength?: number;
    /**
     * Тип инпута
     */
    inputType?: "text" | "tel" | "email" | "password" | "number" | "card" | "decimal";
    /**
     * Определяет маску для ввода значений
     */
    mask?: string;
    /**
     * Определяет значение инпута по умолчанию
     */
    defaultValue?: string;
    /**
     * Обработчик клика по инпуту
     * @param event - событие клика
     */
    onClick?: (event?: React.MouseEvent) => void;
    /**
     * Обработчик изменения значения инпута
     * @param value - значение инпута
     * @param event - событие изменения значения
     */
    onChange?: (value: string, event?: React.ChangeEvent<HTMLInputElement>) => void;
    /**
     * Обработчик события вствки из буфера обмена
     * @param event - событие вставки из буфера обмена
     */
    onPaste?: (event?: React.ClipboardEvent<HTMLInputElement>) => void;
    /**
     * Обработчик ухода фокуса с инпута
     * @param event - событие ухода фокуса с инпута
     */
    onBlur?: (event?: React.FocusEvent<HTMLInputElement>) => void;
    /**
     * Обработчик фокуса на
     * @param event - событие фокуса на инпут
     */
    onFocus?: (event?: React.FocusEvent<HTMLInputElement>) => void;
    /**
     * Дочерние элементы инпута слева
     */
    contentLeft?: React.ReactNode;
    /**
     * Дочерние элементы инпута справа
     */
    contentRight?: React.ReactNode;
    /**
     * Дочерние элементы инпута снизу
     */
    contentBottom?: React.ReactNode;
    /**
     * Имя элемента управления формой в DOM дереве. Отправляется вместе с формой как часть пары name/value
     */
    name?: string;
    /**
     * Подсказка для функции автозаполнения формы браузером
     */
    autocomplete?: "none" | "cc-number";
    /**
     * Курсор, который будет при наведении курсора на текстовое поле
     */
    cursor?: "pointer" | "text";
    /**
     * Значение текстового поля недоступно для редактирования
     */
    readonly?: boolean;
    /**
     * Принудительный фокус пользовтеля на текстовое поле
     */
    forceFocus?: boolean;
    /**
     * Принудительно сделать текстовое поле не прошедшем валидацию
     */
    forceInvalid?: boolean;
    /**
     *  если присутствует, указывает, что ввод должен автоматически иметь фокус, когда страница завершит загрузку
     */
    autoFocus?: boolean;
    /**
     * Валидаторы для текстового поля
     */
    validators?: ITextInputValidator;
    size?: "md" | "xl";
    /**
     * React-ссылка для `input`
     */
    fieldRef?: React.Ref<HTMLDivElement>;
    /**
     * Дополнительный класс для корневого элемента
     */
    rootClassName?: string;
    /**
     * Дополнительные стили для корневого элемента
     */
    rootStyle?: React.CSSProperties;
    /**
     * Дополнительные стили для инпута
     */
    controlStyle?: React.CSSProperties;
    /**
     * Дополнительный класс для инпута
     */
    controlClassName?: string;
    /**
     * Дополнительные стили для контента слева
     */
    contentLeftStyle?: React.CSSProperties;
    /**
     * Дополнительный класс для контента слева
     */
    contentLeftClassName?: string;
    /**
     * Дополнительные стили для контента справа
     */
    contentRightStyle?: React.CSSProperties;
    /**
     * Дополнительный класс для контента справа
     */
    contentRightClassName?: string;
    /**
     * Ширина блока input
     */
    width?: "auto" | "available";
    /**
     * Класс для поля ввода
     */
    fieldClassName?: string;
};
declare const BaseInput: React.ForwardRefExoticComponent<defaultProps & {
    /**
     * Лейбл для текстового поля
     */
    label: string;
    /**
     * Максимальная длина вводимого значения
     */
    maxLength?: number | undefined;
    /**
     * Тип инпута
     */
    inputType?: "number" | "text" | "tel" | "email" | "password" | "card" | "decimal" | undefined;
    /**
     * Определяет маску для ввода значений
     */
    mask?: string | undefined;
    /**
     * Определяет значение инпута по умолчанию
     */
    defaultValue?: string | undefined;
    /**
     * Обработчик клика по инпуту
     * @param event - событие клика
     */
    onClick?: ((event?: React.MouseEvent) => void) | undefined;
    /**
     * Обработчик изменения значения инпута
     * @param value - значение инпута
     * @param event - событие изменения значения
     */
    onChange?: ((value: string, event?: React.ChangeEvent<HTMLInputElement>) => void) | undefined;
    /**
     * Обработчик события вствки из буфера обмена
     * @param event - событие вставки из буфера обмена
     */
    onPaste?: ((event?: React.ClipboardEvent<HTMLInputElement>) => void) | undefined;
    /**
     * Обработчик ухода фокуса с инпута
     * @param event - событие ухода фокуса с инпута
     */
    onBlur?: ((event?: React.FocusEvent<HTMLInputElement>) => void) | undefined;
    /**
     * Обработчик фокуса на
     * @param event - событие фокуса на инпут
     */
    onFocus?: ((event?: React.FocusEvent<HTMLInputElement>) => void) | undefined;
    /**
     * Дочерние элементы инпута слева
     */
    contentLeft?: React.ReactNode;
    /**
     * Дочерние элементы инпута справа
     */
    contentRight?: React.ReactNode;
    /**
     * Дочерние элементы инпута снизу
     */
    contentBottom?: React.ReactNode;
    /**
     * Имя элемента управления формой в DOM дереве. Отправляется вместе с формой как часть пары name/value
     */
    name?: string | undefined;
    /**
     * Подсказка для функции автозаполнения формы браузером
     */
    autocomplete?: "none" | "cc-number" | undefined;
    /**
     * Курсор, который будет при наведении курсора на текстовое поле
     */
    cursor?: "text" | "pointer" | undefined;
    /**
     * Значение текстового поля недоступно для редактирования
     */
    readonly?: boolean | undefined;
    /**
     * Принудительный фокус пользовтеля на текстовое поле
     */
    forceFocus?: boolean | undefined;
    /**
     * Принудительно сделать текстовое поле не прошедшем валидацию
     */
    forceInvalid?: boolean | undefined;
    /**
     *  если присутствует, указывает, что ввод должен автоматически иметь фокус, когда страница завершит загрузку
     */
    autoFocus?: boolean | undefined;
    /**
     * Валидаторы для текстового поля
     */
    validators?: ITextInputValidator | undefined;
    size?: "md" | "xl" | undefined;
    /**
     * React-ссылка для `input`
     */
    fieldRef?: React.Ref<HTMLDivElement> | undefined;
    /**
     * Дополнительный класс для корневого элемента
     */
    rootClassName?: string | undefined;
    /**
     * Дополнительные стили для корневого элемента
     */
    rootStyle?: React.CSSProperties | undefined;
    /**
     * Дополнительные стили для инпута
     */
    controlStyle?: React.CSSProperties | undefined;
    /**
     * Дополнительный класс для инпута
     */
    controlClassName?: string | undefined;
    /**
     * Дополнительные стили для контента слева
     */
    contentLeftStyle?: React.CSSProperties | undefined;
    /**
     * Дополнительный класс для контента слева
     */
    contentLeftClassName?: string | undefined;
    /**
     * Дополнительные стили для контента справа
     */
    contentRightStyle?: React.CSSProperties | undefined;
    /**
     * Дополнительный класс для контента справа
     */
    contentRightClassName?: string | undefined;
    /**
     * Ширина блока input
     */
    width?: "auto" | "available" | undefined;
    /**
     * Класс для поля ввода
     */
    fieldClassName?: string | undefined;
} & React.RefAttributes<HTMLInputElement>>;
export default BaseInput;
