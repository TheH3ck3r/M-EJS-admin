import React from "react";
import { StoryObj } from "@storybook/react";
import InputNumber from "../InputNumber";
declare const _default: import("@storybook/types").ComponentAnnotations<import("@storybook/react/dist/types-0a347bb9").R, import("../../../../utils/defaultProps").defaultProps & {
    label: string;
    maxLength?: number | undefined;
    inputType?: "number" | "text" | "tel" | "email" | "password" | "card" | "decimal" | undefined;
    mask?: string | undefined;
    defaultValue?: string | undefined;
    onClick?: ((event?: React.MouseEvent<Element, MouseEvent> | undefined) => void) | undefined;
    onChange?: ((value: string, event?: React.ChangeEvent<HTMLInputElement> | undefined) => void) | undefined;
    onPaste?: ((event?: React.ClipboardEvent<HTMLInputElement> | undefined) => void) | undefined;
    onBlur?: ((event?: React.FocusEvent<HTMLInputElement, Element> | undefined) => void) | undefined;
    onFocus?: ((event?: React.FocusEvent<HTMLInputElement, Element> | undefined) => void) | undefined;
    contentLeft?: React.ReactNode;
    contentRight?: React.ReactNode;
    contentBottom?: React.ReactNode;
    name?: string | undefined;
    autocomplete?: "none" | "cc-number" | undefined;
    cursor?: "text" | "pointer" | undefined;
    readonly?: boolean | undefined;
    forceFocus?: boolean | undefined;
    forceInvalid?: boolean | undefined;
    autoFocus?: boolean | undefined;
    validators?: import("../../BaseInput/BaseInput").ITextInputValidator | undefined;
    size?: "md" | "xl" | undefined;
    fieldRef?: React.Ref<HTMLDivElement> | undefined;
    rootClassName?: string | undefined;
    rootStyle?: React.CSSProperties | undefined;
    controlStyle?: React.CSSProperties | undefined;
    controlClassName?: string | undefined;
    contentLeftStyle?: React.CSSProperties | undefined;
    contentLeftClassName?: string | undefined;
    contentRightStyle?: React.CSSProperties | undefined;
    contentRightClassName?: string | undefined;
    width?: "auto" | "available" | undefined;
    fieldClassName?: string | undefined;
} & {
    separator?: "." | "," | undefined;
    allowSigns?: boolean | undefined;
    fractionLength?: number | undefined;
}>;
export default _default;
/**
 * Компонент умеет принимать только целые и дробные числа с разным знаком. Вид разделителя и количество знаков в дробной части можно настраивать.
 */
export declare const Template: StoryObj<typeof InputNumber>;
