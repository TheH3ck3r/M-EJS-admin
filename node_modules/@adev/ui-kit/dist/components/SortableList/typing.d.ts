import React from "react";
import { Announcements, DragEndEvent, DragStartEvent, UniqueIdentifier } from "@dnd-kit/core";
type ActivatorNode = "cell" | "control";
export type SortableListItem = {
    id: UniqueIdentifier;
    disabled?: boolean;
};
export type SortableListItems = Array<{
    id: UniqueIdentifier;
    disabled?: boolean;
}>;
type PaddingSize = "3xs" | "2xs" | "xs" | "sm" | "md" | "lg";
type PaddingObj = {
    top?: PaddingSize;
    right?: PaddingSize;
    bottom?: PaddingSize;
    left?: PaddingSize;
};
type ControlPosition = "left" | "right";
export type SortableItemProps = {
    activatorNode: ActivatorNode;
    controlPadding?: PaddingSize;
    controlPosition: ControlPosition;
    children: React.ReactNode;
    className: string;
    id: UniqueIdentifier;
    isDragOverlay?: boolean;
    disabled?: boolean;
};
export type SortableListProps = {
    /**
     * Дополнительный класс на контейнер
     */
    className?: string;
    /**
     * Дополнительный класс на элемент списка
     */
    itemClassName?: string;
    /**
     * Отступ контрола от края
     */
    controlPadding?: PaddingSize;
    /**
     * Позиция контрола
     */
    controlPosition?: ControlPosition;
    /**
     * Рендер-функция элемента
     */
    renderItem: (item: SortableListItems[number]) => JSX.Element;
    /**
     * Список сортируемых идентификаторов
     */
    items: SortableListItems;
    /**
     * Отступы.
     */
    padding?: PaddingObj | PaddingSize;
    /**
     * Активатор события перетаскивания. Либо элемент целиком, либо только контрол
     */
    activatorNode?: ActivatorNode;
    /**
     * Тексты объявления для screen reader
     */
    announcements?: Announcements;
    /**
     * Инструкция для screen reader
     */
    screenReaderInstructions?: string;
    /**
     * Коллбэк, вызываемый при начале процесса перетаскивания
     */
    onDragStart?: (event: DragStartEvent) => void;
    /**
     * Коллбэк, вызываемый по окончании перетаскивания
     */
    onDragEnd?: (items: SortableListItems, event?: DragEndEvent) => void;
};
export {};
