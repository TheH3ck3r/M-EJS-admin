import { FC } from "react";
type SubRange = number | [number] | [number, number];
type RangeOptions = {
    min: SubRange;
    max: SubRange;
    [key: string]: SubRange;
};
type PipsType = -1 | 0 | 1 | 2;
type Pips = {
    mode: "range" | "steps" | "positions" | "count" | "values";
    values: number | number[];
    filter?: (value: number, type: PipsType) => PipsType;
    format?: {
        to: (value: number) => string | number;
        from?: (value: string) => number | false;
    };
    stepped?: boolean;
};
export type SliderProps = {
    /**
     * Размер слайдера
     */
    size?: "sm" | "md";
    /**
     * Минимальное значение допустимое в слайдере
     */
    min?: number;
    /**
     * Максимальное значение допустимое в слайдере
     */
    max?: number;
    /**
     * Шаг изменения значения слайдера
     */
    step?: number;
    /**
     * Значение слайдера
     */
    defaultValue: number;
    /**
     * Поведение ползунка
     */
    behaviour?: "unconstrained-tap" | "tap";
    /**
     * Настройка шагов
     * https://refreshless.com/nouislider/pips/#section-range
     */
    range?: RangeOptions;
    /**
     * Отображение подписей
     * https://refreshless.com/nouislider/pips/
     */
    pips?: Pips;
    /**
     * Второе значение слайдера
     * Если передать `defaultValueTo`, то слайдер будет работать, как range.
     */
    defaultValueTo?: number;
    onChange: (payload: {
        value: number;
        valueTo?: number;
    }) => void;
    className?: string;
};
/**
 * Компонент используется для указания значения из заданного диапазона.
 */
declare const Slider: FC<SliderProps>;
export default Slider;
